// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeLogger.Persistence;

namespace TimeLogger.Persistence.Migrations
{
    [DbContext(typeof(TimeLoggerDbContext))]
    [Migration("20200508175106_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TimeLogger.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FreelancerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FreelancerId = 1,
                            Name = "Customer 1"
                        });
                });

            modelBuilder.Entity("TimeLogger.Domain.Entities.Freelancer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Freelancers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Freelancer 1"
                        });
                });

            modelBuilder.Entity("TimeLogger.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Deadline = new DateTime(2020, 5, 11, 20, 51, 5, 633, DateTimeKind.Local).AddTicks(8056),
                            Description = "Test Project 1 Description",
                            Name = "Test Project 1"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            Deadline = new DateTime(2020, 6, 7, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(2328),
                            Description = "Test Project 2 Description",
                            Name = "Test Project 2"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 1,
                            Deadline = new DateTime(2020, 5, 6, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(2525),
                            Description = "Test Project 3 Description",
                            Name = "Test Project 3"
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 1,
                            Deadline = new DateTime(2020, 5, 18, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(2546),
                            Description = "Test Project 4 Description",
                            Name = "Test Project 4"
                        });
                });

            modelBuilder.Entity("TimeLogger.Domain.Entities.TimeRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TimeRegistrations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfWork = new DateTime(2020, 5, 8, 18, 51, 5, 638, DateTimeKind.Local).AddTicks(4856),
                            Description = "Write unit tests",
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2L,
                            DateOfWork = new DateTime(2020, 5, 8, 14, 51, 5, 638, DateTimeKind.Local).AddTicks(8010),
                            Description = "Change framework version",
                            Duration = new TimeSpan(0, 5, 30, 0, 0),
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3L,
                            DateOfWork = new DateTime(2020, 5, 8, 8, 51, 5, 638, DateTimeKind.Local).AddTicks(8125),
                            Description = "test descrption 2",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4L,
                            DateOfWork = new DateTime(2020, 4, 23, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(8139),
                            Description = "create initial structure",
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 5L,
                            DateOfWork = new DateTime(2020, 4, 24, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(8151),
                            Description = "design DB",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 6L,
                            DateOfWork = new DateTime(2020, 4, 26, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(8161),
                            Description = "add business logic",
                            Duration = new TimeSpan(0, 2, 30, 0, 0),
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 7L,
                            DateOfWork = new DateTime(2020, 4, 30, 20, 51, 5, 638, DateTimeKind.Local).AddTicks(8171),
                            Description = "tests",
                            Duration = new TimeSpan(0, 4, 30, 0, 0),
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("TimeLogger.Domain.Entities.Customer", b =>
                {
                    b.HasOne("TimeLogger.Domain.Entities.Freelancer", null)
                        .WithMany("Customers")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeLogger.Domain.Entities.Project", b =>
                {
                    b.HasOne("TimeLogger.Domain.Entities.Customer", null)
                        .WithMany("Projects")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimeLogger.Domain.Entities.TimeRegistration", b =>
                {
                    b.HasOne("TimeLogger.Domain.Entities.Project", null)
                        .WithMany("TimeRegistrations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
